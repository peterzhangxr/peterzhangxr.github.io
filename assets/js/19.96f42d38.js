(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{418:function(t,a,v){"use strict";v.r(a);var _=v(55),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"透视http学习笔记一"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#透视http学习笔记一"}},[t._v("#")]),t._v(" 透视HTTP学习笔记一")]),t._v(" "),v("h2",{attrs:{id:"_01-时势与英雄-http的前世今生"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_01-时势与英雄-http的前世今生"}},[t._v("#")]),t._v(" 01 | 时势与英雄：HTTP的前世今生")]),t._v(" "),v("ul",[v("li",[t._v("HTTP 协议始于三十年前蒂姆·伯纳斯 - 李的一篇论文；")]),t._v(" "),v("li",[t._v("HTTP/0.9 是个简单的文本协议，只能获取文本资源；")]),t._v(" "),v("li",[t._v("HTTP/1.0 确立了大部分现在使用的技术，但它不是正式标准；")]),t._v(" "),v("li",[t._v("HTTP/1.1 是目前互联网上使用最广泛的协议，功能也非常完善；")]),t._v(" "),v("li",[t._v("HTTP/2 基于 Google 的 SPDY 协议，注重性能改善，但还未普及；")]),t._v(" "),v("li",[t._v("HTTP/3 基于 Google 的 QUIC 协议，是将来的发展方向。")])]),t._v(" "),v("h2",{attrs:{id:"_02-http是什么-http又不是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_02-http是什么-http又不是什么"}},[t._v("#")]),t._v(" 02 | HTTP是什么？HTTP又不是什么？")]),t._v(" "),v("blockquote",[v("p",[t._v("HTTP是一个用在计算机世界里的协议。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。")])]),t._v(" "),v("blockquote",[v("p",[t._v("HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。")])]),t._v(" "),v("blockquote",[v("p",[t._v("HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范")])]),t._v(" "),v("h2",{attrs:{id:"_03-http世界全览-上-与http相关的各种概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_03-http世界全览-上-与http相关的各种概念"}},[t._v("#")]),t._v(" 03 | HTTP世界全览（上）：与HTTP相关的各种概念")]),t._v(" "),v("h3",{attrs:{id:"浏览器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),v("p",[t._v("浏览器本质上是一个 HTTP 协议中的请求方，使用 HTTP 协议获取网络上的各种资源。")]),t._v(" "),v("p",[t._v("在 HTTP 协议里，浏览器的角色被称为“User Agent”即“用户代理”，意思是作为访问者的“代理”来发起 HTTP 请求。不过在不引起混淆的情况下，我们通常都简单地称之为“客户端”。")]),t._v(" "),v("h3",{attrs:{id:"web-服务器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#web-服务器"}},[t._v("#")]),t._v(" Web 服务器")]),t._v(" "),v("p",[t._v("当我们谈到“Web 服务器”时有两个层面的含义：硬件和软件。")]),t._v(" "),v("p",[t._v("硬件含义就是物理形式或“云”形式的机器，在大多数情况下它可能不是一台服务器，而是利用反向代理、负载均衡等技术组成的庞大集群。但从外界看来，它仍然表现为一台机器，但这个形象是“虚拟的”。")]),t._v(" "),v("p",[t._v("软件含义的 Web 服务器可能我们更为关心，它就是提供 Web 服务的应用程序，通常会运行在硬件含义的服务器上。它利用强大的硬件能力响应海量的客户端 HTTP 请求，处理磁盘上的网页、图片等静态文件，或者把请求转发给后面的 Tomcat、Node.js 等业务应用，返回动态的信息。")]),t._v(" "),v("h3",{attrs:{id:"cdn"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cdn"}},[t._v("#")]),t._v(" CDN")]),t._v(" "),v("p",[t._v("CDN，全称是“Content Delivery Network”，翻译过来就是“内容分发网络”。它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。")]),t._v(" "),v("p",[t._v("简单来说，它可以缓存源站的数据，让浏览器的请求不用“千里迢迢”地到达源站服务器，直接在“半路”就可以获取响应。如果 CDN 的调度算法很优秀，更可以找到离用户最近的节点，大幅度缩短响应时间。")]),t._v(" "),v("h3",{attrs:{id:"爬虫"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#爬虫"}},[t._v("#")]),t._v(" 爬虫")]),t._v(" "),v("p",[t._v("但 HTTP 协议并没有规定用户代理后面必须是“真正的人类”，它也完全可以是“机器人”，这些“机器人”的正式名称就叫做“爬虫”（Crawler），实际上是一种可以自动访问 Web 资源的应用程序。")]),t._v(" "),v("h3",{attrs:{id:"waf"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#waf"}},[t._v("#")]),t._v(" WAF")]),t._v(" "),v("p",[t._v("WAF 是近几年比较“火”的一个词，意思是“网络应用防火墙”。与硬件“防火墙”类似，它是应用层面的“防火墙”，专门检测 HTTP 流量，是防护 Web 应用的安全技术。")]),t._v(" "),v("p",[t._v("WAF 通常位于 Web 服务器之前，可以阻止如 SQL 注入、跨站脚本等攻击，目前应用较多的一个开源项目是 ModSecurity，它能够完全集成进 Apache 或 Nginx。")]),t._v(" "),v("h3",{attrs:{id:"你觉得-cdn-在对待浏览器和爬虫时会有差异吗-为什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#你觉得-cdn-在对待浏览器和爬虫时会有差异吗-为什么"}},[t._v("#")]),t._v(" 你觉得 CDN 在对待浏览器和爬虫时会有差异吗？为什么？")]),t._v(" "),v("p",[t._v("CDN 应当是不区分的，因为爬虫本身也是对 Web 资源的访问，且对于爬虫识别并不是 100% 准确的，因此 CDN 只会去计算实际使用了多少资源而不管其中多少来自爬虫；")]),t._v(" "),v("h3",{attrs:{id:"你怎么理解-webservice-与-web-server-这两个非常相似的词"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#你怎么理解-webservice-与-web-server-这两个非常相似的词"}},[t._v("#")]),t._v(" 你怎么理解 WebService 与 Web Server 这两个非常相似的词？")]),t._v(" "),v("p",[t._v("Web Service 是一种由 W3C 定义的应用服务开发规范，使用 client-server 主从架构，通常使用 WSDL 定义服务接口，使用 HTTP 协议传输 XML 或 SOAP 消息，也就是说，它是一个基于 Web（HTTP）的服务架构技术，既可以运行在内网，也可以在适当保护后运行在外网。")]),t._v(" "),v("h2",{attrs:{id:"_04-http世界全览-下-与http相关的各种协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_04-http世界全览-下-与http相关的各种协议"}},[t._v("#")]),t._v(" 04 | HTTP世界全览（下）：与HTTP相关的各种协议")]),t._v(" "),v("h3",{attrs:{id:"tcp-ip"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip"}},[t._v("#")]),t._v(" TCP/IP")]),t._v(" "),v("p",[t._v("TCP/IP 协议实际上是一系列网络通信协议的统称，其中最核心的两个协议是 TCP 和 IP，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。")]),t._v(" "),v("p",[t._v("这个协议栈有四层，最上层是“应用层”，最下层是“链接层”，TCP 和 IP 则在中间：TCP 属于“传输层”，IP 属于“网际层”。")]),t._v(" "),v("p",[t._v("IP协议是“Internet Protocol”的缩写，主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。IP 协议使用“IP 地址”的概念来定位互联网上的每一台计算机。")]),t._v(" "),v("p",[t._v("TCP 协议是“Transmission Control Protocol”的缩写，意思是“传输控制协议”，它位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的基础。")]),t._v(" "),v("h3",{attrs:{id:"dns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[t._v("#")]),t._v(" DNS")]),t._v(" "),v("p",[t._v("目前全世界有 13 组根 DNS 服务器，下面再有许多的顶级 DNS、权威 DNS 和更小的本地 DNS，逐层递归地实现域名查询。")]),t._v(" "),v("h3",{attrs:{id:"uri-url"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#uri-url"}},[t._v("#")]),t._v(" URI/URL")]),t._v(" "),v("ul",[v("li",[t._v("协议名：即访问该资源应当使用的协议，在这里是“http”；")]),t._v(" "),v("li",[t._v("主机名：即互联网上主机的标记，可以是域名或 IP 地址，在这里是“nginx.org”；")]),t._v(" "),v("li",[t._v("路径：即资源在主机上的位置，使用“/”分隔多级目录，在这里是“/en/download.html”。")])]),t._v(" "),v("h3",{attrs:{id:"https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),v("p",[t._v("HTTPS 就相当于这个比喻中的“火星文”，它的全称是“HTTP over SSL/TLS”，也就是运行在 SSL/TLS 协议上的 HTTP。")]),t._v(" "),v("h3",{attrs:{id:"代理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),v("p",[t._v("代理（Proxy）是 HTTP 协议中请求方和应答方中间的一个环节，作为“中转站”，既可以转发客户端的请求，也可以转发服务器的应答。")]),t._v(" "),v("ul",[v("li",[t._v("匿名代理：完全“隐匿”了被代理的机器，外界看到的只是代理服务器；")]),t._v(" "),v("li",[t._v("透明代理：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端；")]),t._v(" "),v("li",[t._v("正向代理：靠近客户端，代表客户端向服务器发送请求；")]),t._v(" "),v("li",[t._v("反向代理：靠近服务器端，代表服务器响应客户端的请求；")])])])}),[],!1,null,null,null);a.default=r.exports}}]);